The ``2-matrix_divided`` module
================================

using ``2-matrix_divided``
--------------------------

import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

test basic:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], 2)
    [[6.0, 11.5, 22.5], [6.0, 1.5, 2.5]]

test for a negative div:
    >>> matrix_divided([[15, 23, 45], [12, 3, 5]], -5)
    [[-3.0, -4.6, -9.0], [-2.4, -0.6, -1.0]]

test when rows aren't same and div is positive:
    >>> matrix_divided([[12, 12, 23, 45], [12, 3, 5]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

test when rows aren't same and div is negative:
    >>> matrix_divided([[12, 12, 23, 45], [12, 3, 5]], -5)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

test when div is equal to 0:
    >>> matrix_divided([[12, 12, 23, 45], [12, 3, 5]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

second test when div is equal to 0:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

test when div is a positive float:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], 2.3)
    [[5.22, 10.0, 19.57], [5.22, 1.3, 2.17]]

test when div is a negative float:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], -4.3)
    [[-2.79, -5.35, -10.47], [-2.79, -0.7, -1.16]]

test when div is not an integer or a float:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], "str")
    Traceback (most recent call last):
    TypeError: div must be a number

test when div is None:
    >>> matrix_divided([[12, 23, 45], [12, 3, 5]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

next test:
    >>> matrix_divided([[12, 23, 45], [12, 23, 3, 5]], "str")
    Traceback (most recent call last):
    TypeError: div must be a number

next test:
    >>> matrix_divided([[12, 23, 45], [12, 23, 3, 5]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

test when we have empty rows in the matrix and a positive div:
    >>> matrix_divided([[], []], 12)
    [[], []]

test when we have empty rows in the matrix and a negative div:
    >>> matrix_divided([[]], -8)
    [[]]

test when we have empty rows in the matrix and a float div:
    >>> matrix_divided([[]], 5.7)
    [[]]

test when rows contains None:
    >>> matrix_divided([[None], [None]], 1)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists)of integers/floats

test for None in rows and string for div:
    >>> matrix_divided([[None], [None]], "str")
    Traceback (most recent call last):
    TypeError: div must be a number

None for all:
    >>> matrix_divided([[None], [None]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

test for empty matrix:
    >>> matrix_divided([[12, 23,"welcome", 45], [12, 23, 3, 5]], 12)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists)of integers/floats
